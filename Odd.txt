%{
%}

%s A B C DEAD

%%
<INITIAL>1 BEGIN A;
<INITIAL>0 BEGIN B;
<INITIAL>[^01\n] BEGIN DEAD;
<INITIAL>\n BEGIN INITIAL; {printf("Not Accepted\n");}

<A>1 BEGIN INITIAL;
<A>0 BEGIN C;
<A>[^01\n] BEGIN DEAD;
<A>\n BEGIN INITIAL; {printf("Not Accepted\n");}

<B>1 BEGIN C;
<B>0 BEGIN INITIAL;
<B>[^01\n] BEGIN DEAD;
<B>\n BEGIN INITIAL; {printf("Accepted\n");}

<C>1 BEGIN B;
<C>0 BEGIN A;
<C>[^01\n] BEGIN DEAD;
<C>\n BEGIN INITIAL; {printf("Not Accepted\n");}


<DEAD>[^\n] BEGIN DEAD;
<DEAD>\n BEGIN INITIAL; {printf("Invalid\n");}

%%

int main()
{
	printf("Enter String\n");
	yylex();
	return 0;
}

/* Lex Program to check whether a number is Prime or Not */

%{
/* Definition section */
#include<stdio.h>
#include<stdlib.h>
int flag,c,j;
%}

/* Rule Section */
%%
[0-9]+ {c=atoi(yytext);
		if(c==2)
		{
		printf("\n Prime number");
		}
		else if(c==0 || c==1)
		{
		printf("\n Not a Prime number");
		}
		else
		{
		for(j=2;j<c;j++)
		{
		if(c%j==0)
		flag=1;
		}
		if(flag==1)
		printf("\n Not a prime number");
		else if(flag==0)
		printf("\n Prime number");
		}
	}
%%

// driver code
int main()
{
yylex();
return 0;
}





